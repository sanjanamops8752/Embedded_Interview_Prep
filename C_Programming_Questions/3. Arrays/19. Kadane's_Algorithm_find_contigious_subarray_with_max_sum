#include <stdio.h> 

int kadane_algorithm(int *arr, int size)
{
    int max_sum_so_far = arr[0];
    int max_curr_element = arr[0];

    for (int i = 1; i < size; i++)
    {
        if (max_curr_element < 0)
            max_curr_element = arr[i];
        else
            max_curr_element += arr[i];

        if (max_sum_so_far < max_curr_element)
            max_sum_so_far = max_curr_element;
    }

    return max_sum_so_far;
}

int main()
{
    int arr[] = {-2,1-3,4,-1,2,1,-5,4};
    int size = sizeof(arr)/sizeof(arr[0]);
    int res = kadane_algorithm(arr,size);
    printf("%d",res);
    return 0;
}

//returning the subarray that gives the max sum 
#include <stdio.h> 

void kadane_algorithm(int *arr, int size)
{
    int max_sum_so_far = arr[0];
    int max_curr_element = arr[0];

    int start =0, end = 0;
    int temp_start = 0; 
    
    for(int i=1;i<size;i++)
    {
        if(max_curr_element<0)
        {
            max_curr_element = arr[i];
        }
        else
        {
            max_curr_element += arr[i];
        }
        if(max_sum_so_far<max_curr_element)
        {
            max_sum_so_far = max_curr_element;
            temp_start = start;
            end = i; 
        }
    }
    printf("Maximum Sum Subarray: Start = %d, End = %d Giving Max Sum %d \n", start, end, max_sum_so_far);
    printf("Elements: ");
    for (int i = start; i <= end; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main()
{
    int arr[] = {-2,1-3,4,-1,2,1,-5,4};
    int size = sizeof(arr)/sizeof(arr[0]);
    kadane_algorithm(arr,size);
    return 0;
}
