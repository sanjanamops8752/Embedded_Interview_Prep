COMMUNICATION PROTOCOLS 

1. Communication Protocol 
  a. It is a set of rules that govern the exchange of data between two or more devices in a network/embedded systems. 
  b. These protocols ensure that the data transmitted is properly formatted, understood and interpretted by the sender and receiver.  

2. Synchronous Vs Asynchronous Communication 
  a. Synchronous Communication - involves a shared clock signal between sender and receiver. This ensures both devices are synced in time and they can coordinate when to send 
     and receive each bit. Since clock is common, the data transfer is faster and in continuous form. Example - SPI, I2C
  
     Mechanism: (how both ends know exactly when to sample data)
       1. The clock signal toggles at a fixed frequency (e.g. 1MHz), creating rising and falling edges. 
       2. Devices synchronize their internal logic to this clock - Clock edges (the transitions from LOW to HIGH or HIGH to LOW voltage) act as "tick" moments
          and devices only read or write data at those tick points. 
       3. Each bit is sampled on a specific clock edge (e.g. rising edge).
  
     Advantage: 
       1. Bulk transfer 
       2. Minimal Overhead - no need for start and stop bits
       3. Accurate timing 
  
     Disadvantage: 
       1. Needs a designated clock line, that can increase the pin count. 
       2. Not ideal for long distance communication or in noisy environments. 
  
  b. Asynchronous Communication - does not involve a shared clock. Sender and receiver, operate on their internal clocks, must agree on a common baud rate beforehand. 
     Data transmission is coordinated using start and stop bits. These bits tell us when a frame is starting/ending. 
  
     Mechanism: 
     1. Sender starts communication with start bit(logic low). 
     2. This signals the receiver to start reading the incoming bits. 
     3. A fixed number of data bits follow. 
     4. An optional parity bit might be added for error checking. 
     5. A stop bit (logic high) indicates end of transmission. 
  
     Advantage: 
     1. Peer to peer communication. 
     2. Ideal for long distance communication. 
  
     Disadvantage: 
     1. Overhead. 
     2. Timing mismatch. 
  
  c. Sampling and Bit errors in Asynchronous Communication 
     A sampling error occurs when the receiver samples the incoming data at the wrong time, leading to incorrect interpretation of the bit value (0 or 1).
     A bit error refers to the alteration or corruption of a bit during transmission, usually due to noise, interference, or timing mismatches.
     
     Timing mismatch is a common problem in asynchronous communication. This happens when the sender and receiver's clocks differ slightly. 
     This is why the baud rate must match. 

3. Simplex, Half-Duplex and Full-Duplex Communication 
   Communication modes define the direction of data flow between devices. 
   a. Simplex Communication - allows data to flow in only one direction — from the sender to the receiver — with no possibility of reverse communication. 
      A good example is a keyboard. 
   b. Half-Duplex Communication - allows data to be sent and received in both directions, but not simultaneously. At any given moment, the device can either send or receive. 
      Walkie-talkies or RS-485 systems use half-duplex communication.
   c. Full Duplex Communication allows data transmission in both directions simultaneously, just like a telephone call. Devices can send and receive data at the same time without interference. 
      Modern USB, Ethernet, and UART support full duplex.

4. Error Detection Mechanisms in Communication Protocols
    a. Parity Bit - A simple form of error detection. An extra bit (either even or odd parity) is added to ensure that the total number of 1s in the data word is even 
    (for even parity) or odd (for odd parity). Used in UART, though not highly reliable for complex systems.
    b. Checksum - A calculated value (sum of data bytes) is sent along with the data. The receiver recalculates the checksum and compares it with the received one.
       Common in networking protocols like IP, TCP, UDP.
    c. Cyclic Redundancy Check (CRC) - A more robust mechanism than checksums. Uses polynomial division to generate a unique value based on the data payload.
       Errors such as burst errors can be detected efficiently. Used in CAN, Ethernet, and USB protocols.

5. How Are Errors Handled? 
   Asynchronous Communication: Error Detection Techniques
     a. Start/Stop Bit Framing Check: The UART receiver checks if the incoming frame starts with a start bit (logic low) and 
        ends with a stop bit (logic high). If stop bit is missing or corrupted, a Framing Error is flagged.
     b.Parity Bit (Optional): A single bit added to check for even or odd number of 1s. If parity doesn’t match, a Parity Error is triggered.
      Limited detection capability (detects 1-bit errors only).
     c. Buffer Overrun Detection: If receiver can't process incoming data fast enough, a buffer overrun occurs.
  
      What Happens Then?
      UART hardware raises error flags: Framing Error, Parity Error, Overrun Error.
      Firmware can read these flags and decide to - Discard the corrupted byte. Request retransmission (if implemented in higher protocol).
      Signal to the user/system that communication failed.
      
      UART itself doesn’t correct errors; it only detects them. Error recovery must be done at the application level.

   Synchronous Communication: Error Detection Techniques 
     a. SPI: SPI does not have built-in error detection. Sampling is edge-triggered (rising or falling) based on clock polarity and phase (CPOL/CPHA).
         If sampling is incorrect (wrong clock settings, skew), the receiver gets wrong bits with no way to detect it.
         Hence, it's common to:
         1. Use CRC or checksum at the application level.
         2. Use known sync bytes at the start of frames to verify alignment.
  
      b. I²C: I²C has basic error checking via ACK/NACK bits. After every byte, receiver sends ACK (0) or NACK (1). If the sender gets NACK, it knows something went wrong.

6. SPI (Serial Peripheral Interface) 
  SPI is synchronous, full-duplex, master-slave protocol used for high speed communication between microcontroller and peripheral. 
  
  6.1 Signal Lines 
    a. SCLK (Serial Clock) - clock generated by master
    b. MISO (Master In Slave Out) - data sent from slave to master
    c. MOSI (Master Out Slave In) - data sent from master to slave 
    d. SS/CS (Slave Select/ Chip Select) - active low signal used to select slave 
  
  For n slaves, we need n chip select lines unless we are using daisy chaining. 
  
  6.2 Communication Flow 
    a. Master selects slave by pulling SS to low. 
    b. Master begins toggling the SCLK. 
    c. Data on MISO and MOSI is shifted bit by bit on clock edges. 
    d. After the required bytes are exchanged, SS is pulled to high to deselect slave. 
  
  SPI is full duplex, data is sent and received simultaneously. 
  
  6.3 Clock Configuration 
  SPI supports 4 modes, depending on:
    CPOL (Clock Polarity): Idle state of clock (0 = low, 1 = high)
    CPHA (Clock Phase): Whether data is sampled on 1st or 2nd clock edge
    Mode	CPOL	CPHA	Clock Idle	Data Sampling
    0	      0	    0	   Low	      Rising edge
    1	      0	    1	   Low	      Falling edge
    2	      1	    0	   High	      Falling edge
    3	      1	    1	   High	       Rising edge

7. I2C (Inter Integrated Circuit)
  I²C is a synchronous, half-duplex, multi-master, multi-slave protocol used for connecting multiple peripherals using only two 
  lines.
  
  7.1 Signal Lines 
    a. SCL (Serial Clock Line): Clock signal generated by master.
    b. SDA (Serial Data Line): Bidirectional data line.
    Both lines are open-drain and require pull-up resistors.
    
  7.2 Communication Flow 
    a. Master sends START condition (SDA goes low while SCL is high).
    b. Sends 7/10-bit slave address + R/W bit.
    c. Slave responds with ACK.
    d. Master sends or receives data, each byte acknowledged.
    e. Communication ends with a STOP condition (SDA goes high while SCL is high).

  7.3 Arbitration:
    In multi-master mode, both masters monitor the SDA line.
    If one master sees a mismatch between what it sent and what’s on the line, it loses arbitration and backs off.

8. UART (Universal Asynchronous Receiver Transmitter)
  UART is an asynchronous, full-duplex, point-to-point protocol that allows serial data transmission between two devices using just two lines 
  — TX and RX.
  
  8.1 Communication Flow:
    a. Both devices agree on a common baud rate (e.g., 9600 bps).
    b. Each frame consists of:
    c. Start bit (0)
    d. Data bits (5–9 bits)
    e. Optional parity bit
    f. Stop bit(s) (1 or 2, logic high)
    Receiver uses internal timing to sample each bit mid-period.

